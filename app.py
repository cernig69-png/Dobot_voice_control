# -*- coding: utf-8 -*-
"""
‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° Dobot Magician ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏™‡∏µ‡∏¢‡∏á (‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢)
- STT: faster-whisper
- Audio: sounddevice
- Robot: pydobot (serial)

‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ:
1) ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ COM_PORT ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏à‡∏£‡∏¥‡∏á (‡πÄ‡∏ä‡πà‡∏ô "COM4")
2) pip install faster-whisper sounddevice scipy numpy pyserial pydobot
3) python -u app.py
‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
- "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°" (‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å) / "‡∏´‡∏¢‡∏∏‡∏î‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°" (‡∏•‡πá‡∏≠‡∏Å)
- "‡∏Ç‡∏∂‡πâ‡∏ô 10", "‡∏•‡∏á 5", "‡∏ã‡πâ‡∏≤‡∏¢ 10", "‡∏Ç‡∏ß‡∏≤ 5", "‡∏´‡∏ô‡πâ‡∏≤ 10", "‡∏ñ‡∏≠‡∏¢ 10"
- "‡∏î‡∏π‡∏î" / "‡∏õ‡∏•‡πà‡∏≠‡∏¢" (vacuum)
- "‡πÇ‡∏Æ‡∏°" / "‡∏´‡∏¢‡∏∏‡∏î‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô"
"""

import warnings; warnings.filterwarnings("ignore", category=UserWarning, module="ctranslate2")
print("üöÄ app.py start", flush=True)

# ================== CONFIG ==================
COM_PORT = "COM4"     # ‡πÉ‡∏™‡πà‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏à‡∏£‡∏¥‡∏á ‡πÄ‡∏ä‡πà‡∏ô "COM4" (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏™‡πà‡πÉ‡∏´‡πâ‡∏ï‡∏≤‡∏¢‡∏ï‡∏±‡∏ß)
BAUDRATE = 115200

MODEL_SIZE = "tiny"   # tiny/base/small/medium/large-v3 (‡πÉ‡∏´‡∏ç‡πà=‡πÅ‡∏°‡πà‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏ï‡πà‡∏ä‡πâ‡∏≤‡∏Å‡∏ß‡πà‡∏≤)
LANGUAGE   = "th"     # None = ‡πÉ‡∏´‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏î‡∏≤‡∏†‡∏≤‡∏©‡∏≤‡πÄ‡∏≠‡∏á

SAMPLE_RATE   = 16000
CHANNELS      = 1
CHUNK_SECONDS = 4.0   # ‡∏≠‡∏±‡∏î‡∏ó‡∏µ‡∏•‡∏∞‡∏Å‡∏µ‡πà‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
STEP_MM       = 5.0   # ‡∏£‡∏∞‡∏¢‡∏∞‡∏Å‡πâ‡∏≤‡∏ß‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡πà‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á (mm) ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô

# ‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (mm) ‚Äî ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡πÇ‡∏ï‡πä‡∏∞‡∏Ñ‡∏∏‡∏ì
X_MIN, X_MAX = 100, 260
Y_MIN, Y_MAX = -150, 150
Z_MIN, Z_MAX = -5, 130

# HOME ‡∏™‡∏π‡∏á‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡∏ä‡∏ô‡πÇ‡∏ï‡πä‡∏∞
HOME_POS = (200.0, 0.0, 80.0, 0.0)   # (x,y,z,r)
# ============================================

# ------------- Imports ‡πÅ‡∏ö‡∏ö Lazy ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏∏‡∏î‡∏Ñ‡πâ‡∏≤‡∏á -------------
def step(msg): print(msg, flush=True)

def load_stt_model():
    step("üß† ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• STT ... (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏≠‡∏≤‡∏à‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå)")
    from faster_whisper import WhisperModel
    m = WhisperModel(MODEL_SIZE, device="cpu", compute_type="int8")
    step("‚úÖ STT ‡∏û‡∏£‡πâ‡∏≠‡∏°")
    return m

def record_once(seconds=CHUNK_SECONDS):
    # ‡∏≠‡∏±‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡∏™‡∏±‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡∏Ñ‡πå ‚Üí record.wav
    import sounddevice as sd
    import numpy as np
    from scipy.io.wavfile import write as wav_write
    from pathlib import Path
    import queue, time

    step(f"üéß ‡∏≠‡∏±‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á {seconds:.1f}s ... (‡∏û‡∏π‡∏î‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢)")
    q = queue.Queue()
    def cb(indata, frames, t, status):
        if status: print("AUDIO:", status, flush=True)
        q.put(indata.copy())

    frames = []
    with sd.InputStream(samplerate=SAMPLE_RATE, channels=CHANNELS, dtype="float32", callback=cb):
        t0 = time.time()
        while time.time() - t0 < seconds:
            try:
                frames.append(q.get(timeout=1))
            except queue.Empty:
                pass

    if not frames:
        step("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÄ‡∏™‡∏µ‡∏¢‡∏á")
        return None

    audio = np.concatenate(frames, axis=0)
    peak = float(np.max(np.abs(audio))) if audio.size else 0.0
    audio_i16 = np.int16(audio/peak*32767) if peak>0 else np.int16(audio)

    out_wav = Path("record.wav")
    wav_write(out_wav, SAMPLE_RATE, audio_i16)
    step(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå {out_wav.resolve()}")
    return str(out_wav)

def transcribe(path, stt):
    step("üîé ‡∏ñ‡∏≠‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á ...")
    texts = []
    segments, info = stt.transcribe(path, language=LANGUAGE, vad_filter=True)
    for seg in segments:
        print(f"[{seg.start:.2f}‚Üí{seg.end:.2f}] {seg.text}", flush=True)
        texts.append(seg.text)
    text = "".join(texts).strip()
    print("üìÑ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°:", text, flush=True)
    return text

# --------------------- Dobot helpers ---------------------
import serial.tools.list_ports
try:
    from pydobot import Dobot
except Exception as e:
    Dobot = None
    print("‚ö†Ô∏è pydobot import ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", e, flush=True)

def autodetect_port():
    ports = list(serial.tools.list_ports.comports())
    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢: ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡∏Å‡πá‡πÄ‡∏≠‡∏≤‡πÄ‡∏•‡∏¢
    if not ports: return None
    # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô USB-to-UART
    for p in ports:
        d = p.description.upper()
        if "USB" in d or "UART" in d or "SILICON" in d or "CP210" in d or "CH340" in d or "FTDI" in d:
            return p.device
    return ports[0].device

def clamp(v, vmin, vmax): return max(vmin, min(v, vmax))

def safe_bound(x, y, z):
    return (clamp(x, X_MIN, X_MAX),
            clamp(y, Y_MIN, Y_MAX),
            clamp(z, Z_MIN, Z_MAX))

robot = None
def connect_robot():
    """‡∏°‡∏¥‡∏ô‡∏¥‡∏°‡∏≠‡∏•: ‡πÑ‡∏°‡πà‡∏ï‡∏±‡πâ‡∏á speed/acc ‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡πÇ‡∏≠‡∏Å‡∏≤‡∏™ error index out of range"""
    global robot
    if Dobot is None:
        raise RuntimeError("pydobot ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ (import ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)")

    port = COM_PORT or autodetect_port()
    ports = [f"{p.device} | {p.description}" for p in serial.tools.list_ports.comports()]
    print("üîå COM ports:", ", ".join(ports) if ports else "(none)", flush=True)
    if port is None:
        raise RuntimeError("‡∏´‡∏≤ COM ‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡πà‡∏≠ USB ‡πÅ‡∏•‡∏∞‡∏î‡∏π‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÉ‡∏ô Device Manager")

    print(f"ü§ñ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Dobot ‡∏ó‡∏µ‡πà {port} ...", flush=True)
    robot = Dobot(port=port, verbose=False)

    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö pose ‡∏Å‡πà‡∏≠‡∏ô
    p = get_pose()
    print(f"‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à pose={p}", flush=True)

    # ‡∏¢‡∏Å Z ‡∏Ç‡∏∂‡πâ‡∏ô‡∏ñ‡πâ‡∏≤‡∏ï‡πà‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
    x,y,z,r = p
    try:
        safe_z = max(z, 50.0)
        goto_xyzr(x, y, safe_z, r, wait=True)
    except Exception:
        pass

    # ‡∏Å‡∏•‡∏±‡∏ö HOME ‡∏™‡∏π‡∏á ‡πÜ
    try:
        goto_xyzr(*HOME_POS, wait=True)
        print("üè† ‡πÑ‡∏õ HOME ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", flush=True)
    except Exception as e:
        print("‚ö†Ô∏è ‡πÑ‡∏õ HOME ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ:", e, flush=True)

def get_pose():
    for attr in ("pose", "get_pose", "get_pose_as_dict"):
        f = getattr(robot, attr, None)
        if callable(f):
            p = f()
            if isinstance(p, dict):
                return (p.get("x"), p.get("y"), p.get("z"), p.get("r"))
            if isinstance(p, (list, tuple)) and len(p) >= 4:
                return (p[0], p[1], p[2], p[3])
    raise RuntimeError("‡∏´‡∏≤‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏≠‡πà‡∏≤‡∏ô pose ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÉ‡∏ô pydobot ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ")

def goto_xyzr(x, y, z, r=0.0, wait=True):
    x, y, z = safe_bound(x, y, z)
    # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô
    for name in ("move_to", "go", "move_to_xyz"):
        f = getattr(robot, name, None)
        if callable(f):
            try:
                return f(x, y, z, r, wait=wait)
            except TypeError:
                return f(x, y, z, r)
    # Fallback: ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ PTP ‡∏ï‡∏£‡∏á
    f = getattr(robot, "set_ptp_cmd", None)
    if callable(f):
        return f(x, y, z, r, mode=1, wait=wait)

def move_rel(dx=0, dy=0, dz=0, dr=0, wait=True):
    x, y, z, r = get_pose()
    return goto_xyzr(x + dx, y + dy, z + dz, r + dr, wait=wait)

def suction(on: bool):
    for name in ("suck", "set_end_effector_suction_cup"):
        f = getattr(robot, name, None)
        if callable(f):
            try:
                return f(on)
            except TypeError:
                try:
                    return f(enable=on, on=on)
                except Exception:
                    pass
    print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏î‡∏π‡∏î/‡∏õ‡∏•‡πà‡∏≠‡∏¢ suction ‡πÉ‡∏ô pydobot ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ")

def go_home():
    return goto_xyzr(*HOME_POS, wait=True)

# -------------------- NLP ‚Üí Action --------------------
import re
TH_NUM = {"‡∏®‡∏π‡∏ô‡∏¢‡πå":0,"‡∏´‡∏ô‡∏∂‡πà‡∏á":1,"‡∏™‡∏≠‡∏á":2,"‡∏™‡∏≤‡∏°":3,"‡∏™‡∏µ‡πà":4,"‡∏´‡πâ‡∏≤":5,"‡∏´‡∏Å":6,"‡πÄ‡∏à‡πá‡∏î":7,"‡πÅ‡∏õ‡∏î":8,"‡πÄ‡∏Å‡πâ‡∏≤":9,"‡∏™‡∏¥‡∏ö":10}
def parse_number(text):
    m = re.search(r"(\d+)", text)
    if m: return int(m.group(1))
    for k,v in TH_NUM.items():
        if k in text: return v
    return None

armed = False
estop = False

def nlp_to_action(text):
    t = text.strip().replace(" ", "")
    t_raw = text

    if "‡∏´‡∏¢‡∏∏‡∏î‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô" in t or "emergencystop" in t_raw.lower():
        return {"type":"ESTOP"}
    if "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°" in t or "‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å" in t:
        return {"type":"ARM", "on": True}
    if "‡∏´‡∏¢‡∏∏‡∏î‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°" in t or "‡∏•‡πá‡∏≠‡∏Å" in t:
        return {"type":"ARM", "on": False}

    if "‡∏î‡∏π‡∏î" in t or "vacuumon" in t_raw.lower():
        return {"type":"SUCTION", "on": True}
    if "‡∏õ‡∏•‡πà‡∏≠‡∏¢" in t or "vacuumoff" in t_raw.lower():
        return {"type":"SUCTION", "on": False}

    if "‡πÇ‡∏Æ‡∏°" in t or "home" in t_raw.lower() or "‡∏Å‡∏•‡∏±‡∏ö‡∏ö‡πâ‡∏≤‡∏ô" in t:
        return {"type":"HOME"}

    step = STEP_MM
    n = parse_number(t_raw)
    if n is not None and n > 0:
        step = float(n)

    if "‡∏Ç‡∏∂‡πâ‡∏ô" in t:    return {"type":"MOVE", "dx":0, "dy":0, "dz": +step}
    if "‡∏•‡∏á" in t:      return {"type":"MOVE", "dx":0, "dy":0, "dz": -step}
    if "‡∏ã‡πâ‡∏≤‡∏¢" in t:    return {"type":"MOVE", "dx":0, "dy": +step, "dz":0}
    if "‡∏Ç‡∏ß‡∏≤" in t:     return {"type":"MOVE", "dx":0, "dy": -step, "dz":0}
    if "‡∏´‡∏ô‡πâ‡∏≤" in t or "‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤" in t:
                       return {"type":"MOVE", "dx": +step, "dy":0, "dz":0}
    if "‡∏´‡∏•‡∏±‡∏á" in t or "‡∏ñ‡∏≠‡∏¢" in t:
                       return {"type":"MOVE", "dx": -step, "dy":0, "dz":0}
    if "‡∏´‡∏°‡∏∏‡∏ô‡∏ã‡πâ‡∏≤‡∏¢" in t:
                       return {"type":"MOVE", "dx":0, "dy":0, "dz":0, "dr": +5.0}
    if "‡∏´‡∏°‡∏∏‡∏ô‡∏Ç‡∏ß‡∏≤" in t:
                       return {"type":"MOVE", "dx":0, "dy":0, "dz":0, "dr": -5.0}

    return {"type":"UNKNOWN", "raw": t_raw}

def execute_action(act):
    global armed, estop
    t = act.get("type")

    if t == "ESTOP":
        estop = True
        print("üõë E-STOP! ‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà", flush=True)
        return
    if t == "ARM":
        armed = bool(act.get("on"))
        print(f"üîí ‡πÇ‡∏´‡∏°‡∏î‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° = {armed}", flush=True)
        return
    if estop:
        print("‚õî ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ E-STOP (‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà)", flush=True)
        return
    if not armed:
        print("üîî ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å (‡∏û‡∏π‡∏î‡∏ß‡πà‡∏≤ '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°' ‡∏Å‡πà‡∏≠‡∏ô)", flush=True)
        return

    if t == "SUCTION":
        on = bool(act.get("on"))
        suction(on)
        print(f"üß≤ Suction = {on}", flush=True)
        return

    if t == "HOME":
        print("üè† ‡∏Å‡∏•‡∏±‡∏ö HOME", flush=True)
        go_home()
        return

    if t == "MOVE":
        dx = float(act.get("dx",0)); dy = float(act.get("dy",0))
        dz = float(act.get("dz",0)); dr = float(act.get("dr",0))
        print(f"‚û°Ô∏è MOVE: dx={dx}, dy={dy}, dz={dz}, dr={dr}", flush=True)
        move_rel(dx, dy, dz, dr, wait=True)
        x,y,z,r = get_pose()
        print(f"üìå pose -> x={x:.1f}, y={y:.1f}, z={z:.1f}, r={r:.1f}", flush=True)
        return

    if t == "UNKNOWN":
        print(f"‚ùì ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: {act.get('raw')}", flush=True)

# ------------------------- Main -------------------------
def main():
    # 1) ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Å‡πà‡∏≠‡∏ô (‡πÇ‡∏ä‡∏ß‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ä‡∏±‡∏î)
    stt = load_stt_model()

    # 2) ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏∏‡πà‡∏ô ‚Äî ‡∏ñ‡πâ‡∏≤‡∏û‡∏±‡∏á ‡∏à‡∏∞‡∏ö‡∏≠‡∏Å‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏ö
    print("ü§ñ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏∏‡πà‡∏ô ...", flush=True)
    try:
        connect_robot()
    except Exception as e:
        print("‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Dobot ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", e, flush=True)
        print("üëâ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö COM_PORT / ‡∏™‡∏≤‡∏¢ USB / ‡πÑ‡∏î‡∏£‡πÄ‡∏ß‡∏≠‡∏£‡πå ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà", flush=True)
        return

    print("\n‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡πâ‡∏ß")
    print("   - '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°' ‚Üí ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å", flush=True)
    print("   - '‡∏Ç‡∏∂‡πâ‡∏ô 10', '‡∏ã‡πâ‡∏≤‡∏¢ 5', '‡∏´‡∏ô‡πâ‡∏≤ 10', '‡∏î‡∏π‡∏î', '‡∏õ‡∏•‡πà‡∏≠‡∏¢', '‡πÇ‡∏Æ‡∏°'", flush=True)
    print("   - '‡∏´‡∏¢‡∏∏‡∏î‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ", flush=True)

    while True:
        try:
            input("\n‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á (Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å): ")
        except KeyboardInterrupt:
            print("\nüëã ‡∏≠‡∏≠‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°"); break

        path = record_once(CHUNK_SECONDS)
        if not path:
            continue

        text = transcribe(path, stt)
        if not text:
            print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô‡∏Ñ‡∏≥‡∏û‡∏π‡∏î ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà", flush=True)
            continue

        act = nlp_to_action(text)
        execute_action(act)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüëã ‡∏≠‡∏≠‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°", flush=True)
    except Exception as e:
        import sys
        print("‚ùå ERROR:", e, file=sys.stderr, flush=True)
