# voice_control.py  (Enter ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏î / Enter ‡∏´‡∏¢‡∏∏‡∏î‡∏≠‡∏±‡∏î + robust Dobot connect)
import time
import wave
import re
from typing import Optional

import numpy as np
import sounddevice as sd
from pydobot import Dobot

# ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡∏≠‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô NLP.py
from NLP import transcribe_wav   # ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ transcribe_wav() ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏∑‡πà‡∏≠ record.wav

PORT = "COM4"
STEP = 10
VALID = ["left", "right", "up", "down"]
THAI_MAP = {"‡∏ã‡πâ‡∏≤‡∏¢": "left", "‡∏Ç‡∏ß‡∏≤": "right", "‡∏Ç‡∏∂‡πâ‡∏ô": "up", "‡∏•‡∏á": "down"}

# ==============================
# 1) ‡∏≠‡∏±‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏ö‡∏ö Enter ‡πÄ‡∏£‡∏¥‡πà‡∏°/‡∏´‡∏¢‡∏∏‡∏î
# ==============================
def record_until_enter(filename: str = "record.wav", samplerate: int = 16000, channels: int = 1) -> str:
    """
    ‡∏Å‡∏î Enter ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏î ‡πÅ‡∏•‡∏∞ Enter ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î
    ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô filename (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô record.wav)
    """
    input("\n‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á... (‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏π‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á)")
    print("‚è∫Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß! (‡∏û‡∏π‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢)  >> ‡∏Å‡∏î Enter ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î")
    frames = []

    def callback(indata, frames_count, time_info, status):
        if status:
            print(status)
        frames.append(indata.copy())

    stream = sd.InputStream(samplerate=samplerate, channels=channels, callback=callback)
    stream.start()

    # ‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏î Enter ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    input()
    print("‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏≠‡∏±‡∏î")

    stream.stop()
    stream.close()

    # ‡∏£‡∏ß‡∏°‡∏ö‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÅ‡∏•‡πâ‡∏ß‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô WAV 16-bit PCM
    audio_data = np.concatenate(frames, axis=0) if frames else np.zeros((1, channels), dtype=np.float32)
    with wave.open(filename, "wb") as wf:
        wf.setnchannels(channels)
        wf.setsampwidth(2)  # 16-bit
        wf.setframerate(samplerate)
        wf.writeframes((audio_data * 32767).astype(np.int16).tobytes())

    print(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô {filename}")
    return filename

# ==============================
# 2) Utils: Dobot
# ==============================
def normalize_command(text: str) -> Optional[str]:
    """
    ‡∏Ñ‡∏∑‡∏ô 'left/right/up/down' ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ó‡∏¢‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô)
    """
    t = text.strip().lower()
    for th, en in THAI_MAP.items():
        if re.search(rf"(^|[\s.,!?:;]){re.escape(th)}($|[\s.,!?:;])", t):
            return en
    for en in VALID:
        if re.search(rf"(^|[\s.,!?:;]){en}($|[\s.,!?:;])", t):
            return en
    return None

def get_xyzr(device):
    pose = device.pose()      # ‡∏Ñ‡∏∑‡∏ô 8 ‡∏Ñ‡πà‡∏≤
    return pose[:4]           # x, y, z, r

def move_abs(device, x, y, z, r, dwell=1.2):
    device.move_to(x, y, z, r)
    time.sleep(dwell)

def move_relative(device, direction, step=STEP):
    vec = {
        "left":  (0, -1,  0, 0),
        "right": (0,  1,  0, 0),
        "up":    (0,  0,  1, 0),
        "down":  (0,  0, -1, 0),
    }[direction]
    dx, dy, dz, dr = vec
    x0, y0, z0, r0 = get_xyzr(device)
    x1, y1, z1, r1 = x0 + dx*step, y0 + dy*step, z0 + dz*step, r0 + dr*step
    move_abs(device, x1, y1, z1, r1)
    print(f"‚úÖ Moved {direction} {step} units")

def connect_dobot(port=PORT, retries=2, settle=0.8):
    """
    ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Dobot ‡πÅ‡∏ö‡∏ö‡∏ó‡∏ô‡∏ó‡∏≤‡∏ô:
    - ‡πÄ‡∏ß‡πâ‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏û‡∏≠‡∏£‡πå‡∏ï
    - ‡∏•‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ü‡πÄ‡∏ü‡∏≠‡∏£‡πå in/out
    - warm-up pose
    - retry ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    """
    last_err = None
    for attempt in range(1, retries + 2):
        try:
            print(f"üöÄ Connecting to Dobot... (attempt {attempt})")
            device = Dobot(port=port, verbose=True)
            time.sleep(settle)
            try:
                device._ser.reset_input_buffer()
                device._ser.reset_output_buffer()
            except Exception:
                pass
            _ = get_xyzr(device)  # warm-up
            print("‚úÖ Connected! Current pose:", _)
            return device
        except Exception as e:
            last_err = e
            print(f"‚ö†Ô∏è Connect failed: {e}")
            try:
                device.close()
            except Exception:
                pass
            time.sleep(1.0)
    raise RuntimeError(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Dobot ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà {port}: {last_err}")

# ==============================
# 3) Main loop
# ==============================
def main():
    try:
        device = connect_dobot(PORT, retries=2, settle=0.8)
    except Exception as e:
        print("‚ùå", e)
        return

    print("üéß Voice control ready. ‡∏û‡∏π‡∏î: Left / Right / Up / Down (‡∏´‡∏£‡∏∑‡∏≠ ‡∏ã‡πâ‡∏≤‡∏¢ / ‡∏Ç‡∏ß‡∏≤ / ‡∏Ç‡∏∂‡πâ‡∏ô / ‡∏•‡∏á)")
    print("‚ÑπÔ∏è ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô: ‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏î ‚Üí ‡∏û‡∏π‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‚Üí ‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î‡∏≠‡∏±‡∏î")

    try:
        while True:
            # ‡∏Å‡∏î Enter ‡πÄ‡∏£‡∏¥‡πà‡∏°/‡∏´‡∏¢‡∏∏‡∏î‡∏≠‡∏±‡∏î ‚Üí ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô record.wav
            wavfile = record_until_enter(filename="record.wav", samplerate=16000, channels=1)

            # ‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏ñ‡∏≠‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å record.wav)
            text = transcribe_wav()  # ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ö‡∏û‡∏≤‡∏ò ‡πÅ‡∏•‡∏∞‡∏≠‡πà‡∏≤‡∏ô record.wav ‡∏ï‡∏£‡∏á ‡πÜ
            if not text:
                print("üôà ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
                continue

            print("üó£Ô∏è ‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô‡∏ß‡πà‡∏≤:", text)
            direction = normalize_command(text)
            if not direction:
                print("ü§î ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å (Left/Right/Up/Down ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ã‡πâ‡∏≤‡∏¢/‡∏Ç‡∏ß‡∏≤/‡∏Ç‡∏∂‡πâ‡∏ô/‡∏•‡∏á)")
                continue

            move_relative(device, direction, STEP)

    except KeyboardInterrupt:
        print("\nüëã ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
    finally:
        try:
            device.close()
        except Exception:
            pass

if __name__ == "__main__":
    main()
